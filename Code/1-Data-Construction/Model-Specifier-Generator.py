__author__ = 'Walter Zhang'

import os as os

# Generates files for the batch process

for start_value in range(0, 1):
	starting_iteration = start_value * 100 + 1
	iteration_count = 365

	sub_iteration_folder = 'R_Scripts/' +  str(starting_iteration) + '-' + str(starting_iteration + iteration_count - 1) + '/'

	if not os.path.exists(sub_iteration_folder):
	    os.makedirs(sub_iteration_folder)

	bash_file_base = sub_iteration_folder + 'Runner'
	batch_file = sub_iteration_folder + 'Runner-Batch.sh'
	job_name = 'NYC-Taxi-'

	try:
		os.remove(batch_file)
	except OSError:
		pass

	try:
		os.remove(sub_iteration_folder + 'Runner-Batch.sh')
	except OSError:
		pass
	f4 = open(sub_iteration_folder + 'Runner-Batch.sh', 'a')
	f4.write('#!/bin/bash\n')
	f4.write('# -*- coding: utf-8 -*-\n')

	for i in range(starting_iteration, starting_iteration + iteration_count):
		try:
			os.remove(bash_file_base + '-' + str(i) + '.sbatch')
		except OSError:
			pass
		f3 = open(bash_file_base + '-' + str(i) + '.sbatch', 'a')
		f3.write('#!/bin/bash\n')
		f3.write('# -*- coding: utf-8 -*-\n')
		f3.write('#SBATCH --job-name=' + job_name + str(i) + '_sbatch\n')
		f3.write('#SBATCH --output=' + job_name + str(i) + '_sbatch.out\n')
		f3.write('#SBATCH --error=' + job_name + str(i) + '_sbatch.err\n')
		f3.write('#SBATCH --time=00:35:00\n')
		f3.write('#SBATCH --partition=<...partition_name...>\n')
		f3.write('#SBATCH --nodes=1\n')
		f3.write('#SBATCH --cpus-per-task=6\n')
		f3.write('#SBATCH --mem=51000\n')
		f3.write('module load gcc\n')
		f3.write('module load R\n')

		f4.write('sbatch ' + 'Bootstrap-Runner' + '-' + str(i) + '.sbatch' + '\n')

		f1 = open('Hourly-Data-Constructor.R')
		new_file_name = sub_iteration_folder + 'Hourly-Data-Constructor' + str(i) + '.R'
		new_file_core = 'Hourly-Data-Constructor' + str(i)
		try:
			os.remove(new_file_name)
		except OSError:
			pass
		f2 = open(new_file_name, 'a')
		lines = f1.readlines()

		counter = 1
		for line in lines:
			if counter == 6:
				f2.write('#  This file was generated by Model-Specifier-Generator.py' + '\n')
			if line == 'i   <-   1\n':
				f2.write('i   <-   ' + str(i) + '\n')
			else:
				f2.write(line)
			counter += 1
		f2.close()
		f1.close()
		f3.write('Rscript --vanilla ' + new_file_core + '.R ' +  '\n')
		f3.close()

	f4.close()